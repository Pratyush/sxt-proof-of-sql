// SPDX-License-Identifier: UNLICENSED
// This is licensed under the Cryptographic Open Software License 1.0
pragma solidity ^0.8.28;

import {Test} from "forge-std/Test.sol";
import "./../../src/base/Constants.sol";
import {Errors} from "./../../src/base/Errors.sol";
import {Verifier} from "./../../src/verifier/Verifier.pre.sol";

contract VerifierTest is Test {
    function verify(
        bytes calldata result,
        bytes calldata plan,
        uint256[] calldata placeholderParameters,
        bytes calldata proof,
        uint256[] memory tableLengths,
        uint256[] memory commitments
    ) public view {
        Verifier.__verify({
            __result: result,
            __plan: plan,
            __placeholderParameters: placeholderParameters,
            __proof: proof,
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testSimpleFull() public view {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;
        uint256[] memory commitments = new uint256[](4);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        uint256[] memory placeholderParameters = new uint256[](0);
        Verifier.__verify({
            __result: hex"00000000000000010000000000000001620000000005000000000000000200000000000000000000000000000003",
            __plan: hex"0000000000000001000000000000000f6e616d6573706163652e7461626c650000000000000002000000000000000000000000000000016200000005000000000000000000000000000000016100000005000000000000000100000000000000016200000000000000000000000000000002000000000000000000000001000000010000000500000000000000050000000000000001000000000000000000000000",
            __placeholderParameters: placeholderParameters,
            __proof: hex"0000000000000006000000000000000200000000000000010000000000000002000000000000000000000000000000000000000000000006000000000000000527a607595971e4f8531109d6bcf114838faac36652aa81d86d51f087cd08799c1095fa761ceaceb796068f4b8174492ede1e88c2f4aafee493331c267284be330078dfd5227feba93faa9a0c9c38432d6c169909d2546f8cef0b7a2108d44db71d518c19207b5ee92cca5cfe09ec5aca67af638b4205a7b650ccb9b9ecd6dd81236cd1dd5ae57dd08a8b09bd6bd3397fe4b58aa1638c554b8054dcb2d4d0297e12a7e3d2a6d11cf4e66979ea5458d24f66ba7866c43b933fd2135c2a761990141a2195946baf74f732525ad3a91076da5eb26fab76f76bb9e2d554b2b3d50477119e78189dc8b297f2e80c0417248bbfbded9f74d3b3ac0328d7d41514c5e6151b3b494cc4578ba8b60dc186a2ff6293d6a6141ac56183d69cec6f181e3ea70e2cfa9994132ecf372f26f96d77ba2a6ac4a3a7f4f98b309069ba426060bd8daf0000000000000000000000000000000c243b567d10584b446c52215743458e64839f57c62ec6f1af4888db8fd8a2fed30bc6d6ec6493db3cf65f696068087dc73078b98762740ff559f6252d1b2cbaa1006221096c4579a8559ebafed6334c31741bd6fae87e6eeca162f4d6fc30468d000000000000000000000000000000000000000000000000000000000000000003969bf2d706946a5f6cb8e5fc130f26b3cd5d852aa22c2a715dbb9edc1296fe031dca7f85d86a2cba2fca8ea67fcc53ee0f71ddf5519ef98b704268f2778a53220780935551ce0c4bb35601f528d06ad97592cbb8de6d1bb653733f78a05c6516f7d5afe72044dcb4423372c3fdddd3f9ff2a0427242a8374c0bd6c774919f40ed0d8e1d6de5088ce05321ed2d365e4079175871916a6c5936c10123652d72929668b05c13dc46abebdde30ec9722d27702af843c39a2abffbbcfe928f191432859f22065228d8465f40fcd3d8070ef7be03c72eed4e3857a8892f8303adf57277a2e101b08c653985b8769caae8a100f829eca8a6a3bb5940c81258707143c00000000000000000000000000000002179733e0f0baf3d1133245917a5553402e0afbe2eb449412fa5da356c26a7abd08412422a910989907e5b2f08ad40f79f88a39d300b03cc07b9a765422c07c40000000000000000505a4c0dcf28206120632c8f39cc8948f6d70a9f334dc0e7a8611a2122ba875d82f22fa38c5c70c559c77e64cd91c2f423b992aee6dbfaac7564f383694f0a6442ec862b5269c897278724b80ef0c240e9c702ed12114aa5fdbc1f1dbfad2f89e197353904ee8db0be1a8f309672585059d625aa9a13a815d3bab0e3a2e3b487d090bf2dd285db14d5d0775859219344f2fde472f20dc414620d3e14a4048ae090000000000000002176a512b04f43d625368dc2c18b0837cb1e4bf6245e4655213c539511d0f854508531e25145ca0a61ad78525082c82d4f1ad364c42f4e69050c793daf79e98fd0e3dd8f064153846014324e4bd925ade752741532d04ea0826904a4c78ac7e8f2915c0f80a27e20e3fade85fef51de40a99071be02ab6ef5f56d3fe7970af69b000000000000000319b6eb1b466b6f89b8d9f3494ba4e6364a9bd42ecfffa840e97611784c23264b1cbd828ee41ee64fe61c2038eed2a46c02ad4806ca29a6ea6a9fd9a56990a7f006122c7cfc6747924235eee0c275aa41b7c7f477ce2159781b725ba25df8812c205ce0cf0c21604af18641a95a505b592f1a84b10574121ae0db7480260edab00fbeea896a10d88c100f7321d67852105ab1cd181701aefb43a5008cffc299a42767ae45dfd5a22a518fddd232f815c8cf4fab5cc7dbf6a83edc5d0d410b1cf8059d333a2a346a803bda2622c604daba6c8fdc53837cda3d2d004dcd00afde3c2851bbbc497937763548bc1f1682089efb83e398c9f7b69ea8c1f5f4af33ab2924b08f55fa284f1f64f9028e8e49ab0d604f7a23cd32c3fb9cf380de92a3720427766711ec943c019778a9a4c90d9f47a67ca1af662ab406a8d1b386e2435534272ca1f03e142044baa7f154376f6dab30f50a30983a8ffe8256fee351de33d11a1316fa5ab6408701b4987f795a6149a0d9f233a32706740688d1443acd061d2fbc938eabecfcac569df936b87927395e0cb73bd100893ca6a6e62ec1a8c2280fddfbff0848bf3c0fa2dc44625831cbb0e5169780159f6b202e713fa2e83c40061fe9c9560cec9f7ffe33dcff52417d466eb2ef62f4b745cf7f45caa7d39608",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testCommitmentArrayOddLength() public {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;

        // Create an array with an odd length (5 elements)
        uint256[] memory commitments = new uint256[](5);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        commitments[4] = 12345678901234567890123456789012345678901234567890123456789012345678901234567; // Add extra element

        uint256[] memory placeholderParameters = new uint256[](0);

        // Expect the error for odd-length commitment array
        vm.expectRevert(Errors.CommitmentArrayOddLength.selector);

        Verifier.__verify({
            __result: hex"00",
            __plan: hex"00",
            __placeholderParameters: placeholderParameters,
            __proof: hex"00",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }
}
