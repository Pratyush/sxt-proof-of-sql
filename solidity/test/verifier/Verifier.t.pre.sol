// SPDX-License-Identifier: UNLICENSED
// This is licensed under the Cryptographic Open Software License 1.0
pragma solidity ^0.8.28;

import {Test} from "forge-std/Test.sol";
import "./../../src/base/Constants.sol";
import {Errors} from "./../../src/base/Errors.sol";
import {Verifier} from "./../../src/verifier/Verifier.pre.sol";

contract VerifierTest is Test {
    function verify(
        bytes calldata result,
        bytes calldata plan,
        uint256[] calldata placeholderParameters,
        bytes calldata proof,
        uint256[] memory tableLengths,
        uint256[] memory commitments
    ) public view {
        Verifier.__verify({
            __result: result,
            __plan: plan,
            __placeholderParameters: placeholderParameters,
            __proof: proof,
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testSimpleFull() public view {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;
        uint256[] memory commitments = new uint256[](4);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        uint256[] memory placeholderParameters = new uint256[](0);
        Verifier.__verify({
            __result: hex"00000000000000010000000000000001620000000005000000000000000200000000000000000000000000000003",
            __plan: hex"0000000000000001000000000000000f6e616d6573706163652e7461626c650000000000000002000000000000000000000000000000016200000005000000000000000000000000000000016100000005000000000000000100000000000000016200000000000000000000000000000002000000000000000000000001000000010000000500000000000000050000000000000001000000000000000000000000",
            __placeholderParameters: placeholderParameters,
            __proof: hex"0000000000000006000000000000000200000000000000010000000000000002000000000000000000000000000000000000000000000006000000000000000527a607595971e4f8531109d6bcf114838faac36652aa81d86d51f087cd08799c1095fa761ceaceb796068f4b8174492ede1e88c2f4aafee493331c267284be330078dfd5227feba93faa9a0c9c38432d6c169909d2546f8cef0b7a2108d44db71d518c19207b5ee92cca5cfe09ec5aca67af638b4205a7b650ccb9b9ecd6dd81236cd1dd5ae57dd08a8b09bd6bd3397fe4b58aa1638c554b8054dcb2d4d0297e12a7e3d2a6d11cf4e66979ea5458d24f66ba7866c43b933fd2135c2a761990141a2195946baf74f732525ad3a91076da5eb26fab76f76bb9e2d554b2b3d50477119e78189dc8b297f2e80c0417248bbfbded9f74d3b3ac0328d7d41514c5e6151b3b494cc4578ba8b60dc186a2ff6293d6a6141ac56183d69cec6f181e3ea70e2cfa9994132ecf372f26f96d77ba2a6ac4a3a7f4f98b309069ba426060bd8daf0000000000000000000000000000000c12557adde370a41d1a6596d2a6ea980302ac187f8004c02863280c94c7ca929605b37bca4db854a0cc34f1bb6e0e251c09ecf1fb83557aaaebbbd76b4d4714fe185b57cab008a76bd1b5bd286c889b3e1b9addcd765f35bdf4fe1193daee586d000000000000000000000000000000000000000000000000000000000000000028e8fc627165f7c9769fd9bf68daa329696d22dce9ac5b8ec1f7bccfe558bbaa2df608662d31e8acfe848ada819fce8824756c284830270b1756612c07b320a71ef132e89cb0e8f313ac7c5af9a4970ff0f856751d2acac6221e5ca7cc600563024ed482cfc108a43b8018004ff5a49f149fcaf394624f0034f707b336810804272077e9ce98bf8295ff8ca4d2eeb2bbc5bdc720874579cc7a8f3c11d266ccde0c4a9461a47cdd78fb972f265f6855a92245485566ad0706b01390bf061c6fc627f554ec6c6b89d554f65b08f361b915029ce55a9c426345910e41b1e7b03ab1179eca675900484e54284e14564fbd39ef03af91864a2d74ee58db7ba80913f100000000000000000000000000000002040e4e660e0f0eafb58cceff1a3118261518bf9b6a71edac98625d542500cdf92a8de607d8a6e78eb21b7f5c6b8498eaafe27b33218ec08b3569af86360aee2e00000000000000050533047ad073c186982606a091ad36199078546786766ac3ec7d3aec2db34a932bc8fc0d12fd4370af30180d786b2e1f1bdcd618578050914f32fd289e72ef87007a2298453dfe56468b5c7cdd66b2cb098979bbb294b8ef4a43f634a7c78dc31559fad3bb34266363d9b6df5e279afda1d8ad7b7a76f73c424be596a390b8d90c2551ab84dd79408bcbddf2b4a6b53395efc3e1839a605ec18ec91eb8b6a2fd00000000000000022012b3c005e05a3eb097e5f29101c9f27b310dcb529bca89dd08f261143a5ff805911fdcd0faf31fcb213ffcf9ab877e6dee820695753a565eb48d2d10f0152e19d17a5ab310d1882350d1f59081514f53f6baeeb2aacad6f47c8dc010a63bc3055b9a92010c4227a47b38b725993e4e572b093efca26262355d9092f74adccb0000000000000003292eaea655ab2c3efe4ef9375788e728dc773f150ad3542f41f46cbed872b22c0e595a13ba8f3cf296ae6984987df5653f9fda6b20777c7bcededa7838f3105a2fee84772ae82fccf631066342a0bd96279576b4531427212b59261c21df67061210ef499967216a4c7ef53ea56d56ea5918ee73e75d7ed6a6d01639445b06ad2ffead45962b3f3a2f562df9d54979bc24b81a5e37ea3ac6b8b3c25f19790e4429d1d38d5c87bffbab646020b9e9048f1066fbd8b2540fe16d1a7c729ce224990bfb1cc7ef08a053f69a1e07e89f42ca7ed6ec5af0a56e793dfb9eb702f0711c158d4dd3b96f5eee806be7a7a346807f56df1201cf5d60e8df6d787b985feaad2abbd5183c37a43d9ee8396e2d24b0f750e245e1ab1498e9030a2a8db0af0e302bc5a1cbc953e6cfc9beca56f1d8f5ef1150f3095ed07cd3f9f682b7b08b194b15008445379cd1169704cf0c1a2a00879a66a85081c119e602d192b498db5f722700a440a4429ced408eda36dcb779fc26916a4bf455a25dd631f0fe038297b3228b6a50d77a35a50168a7a3b49fe20e5ae379783874f5d6d50afe1e7967217a1f971cc3d4726cc72f923713e8057bc088a9126b4f85adcb61ea3529677fe26c19b2951dba67758f31ee6caad0e85018fd9b5de74b495c998e91c2c4a5d68c52",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testCommitmentArrayOddLength() public {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;

        // Create an array with an odd length (5 elements)
        uint256[] memory commitments = new uint256[](5);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        commitments[4] = 12345678901234567890123456789012345678901234567890123456789012345678901234567; // Add extra element

        uint256[] memory placeholderParameters = new uint256[](0);

        // Expect the error for odd-length commitment array
        vm.expectRevert(Errors.CommitmentArrayOddLength.selector);

        Verifier.__verify({
            __result: hex"00",
            __plan: hex"00",
            __placeholderParameters: placeholderParameters,
            __proof: hex"00",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }
}
